# IRIS Hub Upgrade v0.15.0

## IRIS Hub Mainnet is about to have a major upgradeÔºÅ

The IRIS Hub Mainet has been running stably for five months since it was launched, during which it has undergone two Class-I upgrades (compatible upgrades); and then we will perform the first Class-II upgrade. Since this upgrade introduces new functional modules, it will inevitably change the calculation of Block Hash, so after the upgrade is completed, the new version v0.15.0 will not coexist with the old version. But don't worry, we don't need hard forks, we don't need to clear the historical data, we can smoothly complete this non-compatible version upgrade. Be aware that this will be the first time in the history of BPoS networks!

## What did we do at v0.15.0

V0.15.0 mainly implements the following functions and optimizations. For details, please refer to [CHANGELOG](https://github.com/irisnet/irishub/blob/release0.15/CHANGELOG.md)

- Asset Management
- Random Number Generator
- Multi-Signature Account & Tx
- Keystore File
- Tendermint Upgrade
- Optimization & Bug Fixes


## Rehearse v0.15.0 upgrade process on Nyancat Testnet

To be cautious, we will first walk through the entire upgrade process on the Nyancat Testnet

### 1. Restart Nyancat Testnet with v0.14.3

For convenience, we use the genesis.json of `nyancat-2` and modify the chain-id to `nyancat-4`.

```bash
# 1. Download nyancat-2's genesis.json to the home directory
curl -o <path_to_your_home>/config/genesis.json https://raw.githubusercontent.com/irisnet/testnets/master/nyancat/config/genesis-nyancat-2.json

# 2. Modify chain-id to nyancat-4
sed -i 's/"chain_id":"nyancat-2"/"chain_id":"nyancat-4"/g' <path_to_your_home>/config/genesis.json

# 3. Verify hash
sha256sum <path_to_your_home>/config/genesis.json
aed9b92abf94079b6abe65b87558efeec9fa3cbc04b8f429604632f76efdc159  genesis.json

# 4. Compile and install v0.14.3
git clone --branch v0.14.3 https://github.com/irisnet/irishub
cd irishub
source scripts/setTestEnv.sh && make get_tools install

# 5. Check the version number
iris version

# 6. Reset data, start node
iris unsafe-reset-all --home=<path_to_your_home>
iris start --home=<path_to_your_home>
```

### 2. Vote

We will propose an **Upgrade Proposal** on nyancat-4, stating the version number of the new software and which height of the blockchain to auto-execute version switch. When the proposal enters the voting stage, everyone can vote according to their own wishes. Of course, we strongly recommend that you vote in favor, because this upgrade is significant and has no harm to you :-)

### 3. Upgrade Nodes

If the  **Upgrade Proposal**  is successfully passed, we will promptly notify you to upgrade through QQ, Riot, Telegram and other channels.

The specific steps are as follows:

```bash
# 1. Compile and install the new version
git clone --branch v0.15.0-rc3 https://github.com/irisnet/irishub
cd irishub
source scripts/setTestEnv.sh && make get_tools install

# 2. Check the version number
Iris version
0.15.0-rc3-<tbd>-1-testnet

# 3. Close old software
kill -9 <iris pid>

# 4. Restart
iris start --home=<path_to_your_home>
```

### 4. Version Switching

When the height of blockchain reaches the height specified by the upgrade proposal, the nodes will automatically check whether the total voting power of the validators who has upgraded has reached the threshold. If so, the nodes will automatically switch its software to the new version.

Check whether the upgrade is successful:

```bash
iriscli upgrade info --trust-node
```

## Mainnet Upgrade Process

[TBD]

## FAQ

### The threshold of the upgrade proposal?

The current mainnet, the requirements for the validators' participation and the vote in favor are very high, respectively:

- Participation: 87.5 %
- Pass threshold: 85.7 %

In other words, during the 5-day voting period, at least 87.5% of Voting Power's validators in the entire network are required to vote, and 85.7% of them voted in favor.

### What if a node does not upgrade before the version switch height?

When the height of the blockchain reaches the height specified by the upgrade proposal, the node will automatically check whether the total voting power of the validators who has upgraded has reached the threshold.

**If Yes **, the upgraded nodes will automatically switch its software to the new version, and the node without upgrading will be forced to go offline.

Recovery steps for forced offline nodes:

```bash
# 1. Compile and install the new version
git clone --branch v0.15.0 https://github.com/irisnet/irishub
cd irishub && make get_tools install

# 2. Check the version number
iris version
0.15.0-<tbd>-1-mainnet

# 3. Close old software
kill -9 <iris pid>

# 4. Restart
iris start --home=<path_to_your_home>

# 5. Query whether the node is upgraded successfully.
iriscli upgrade info --trust-node
```

**If No**, then all nodes will continue to run using the old version of the logic, indicating that this upgrade failed.

**Even if the upgrade fails, it will not affect the blockchain, just the blockchain does not have the new features of the new version. **

However, for the client team (exchanges, browsers, wallets), we still recommend that if the mainnet upgrade fails, it is best to return the Nodes, CLI and LCD used by the application layer to the old version to avoid the new version client connects the old version node will be incompatible.

Of course, this situation is what we do not expect to see, so we hope that everyone will actively participate in the construction of the IRIS ecosystem!
